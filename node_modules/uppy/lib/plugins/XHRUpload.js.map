{"version":3,"sources":["../../src/plugins/XHRUpload.js"],"names":["Plugin","require","cuid","Translator","UppySocket","emitSocketProgress","getSocketHost","settle","limitPromises","module","exports","uppy","opts","type","id","title","defaultLocale","strings","timedOut","defaultOptions","formData","fieldName","method","metaFields","responseUrlFieldName","bundle","headers","locale","timeout","limit","getResponseData","xhr","JSON","parse","response","getResponseError","Error","translator","i18n","translate","bind","handleUpload","limitUploads","fn","getOptions","file","state","xhrUpload","createProgressTimeout","timeoutHandler","self","onTimedOut","log","error","seconds","Math","ceil","aliveTimer","progress","done","setTimeout","clearTimeout","createFormDataUpload","formPost","FormData","Array","isArray","Object","keys","meta","forEach","item","append","data","createBareUpload","upload","current","total","resolve","reject","timer","abort","emit","XMLHttpRequest","addEventListener","ev","loaded","lengthComputable","uploader","bytesUploaded","bytesTotal","target","status","resp","uploadURL","name","request","open","toUpperCase","endpoint","header","setRequestHeader","send","on","fileID","uploadRemote","fields","fetch","remote","url","credentials","body","stringify","size","fieldname","metadata","then","res","statusText","json","token","host","socket","progressData","close","errData","uploadBundle","files","i","emitError","uploadFiles","actions","map","parseInt","length","isRemote","promises","action","limitedAction","fileIDs","getFile","install","addUploader","uninstall","removeUploader"],"mappings":"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","file":"XHRUpload.js","sourcesContent":["const Plugin = require('../core/Plugin')\nconst cuid = require('cuid')\nconst Translator = require('../core/Translator')\nconst UppySocket = require('../core/UppySocket')\nconst {\n  emitSocketProgress,\n  getSocketHost,\n  settle,\n  limitPromises\n} = require('../core/Utils')\n\nmodule.exports = class XHRUpload extends Plugin {\n  constructor (uppy, opts) {\n    super(uppy, opts)\n    this.type = 'uploader'\n    this.id = 'XHRUpload'\n    this.title = 'XHRUpload'\n\n    const defaultLocale = {\n      strings: {\n        timedOut: 'Upload stalled for %{seconds} seconds, aborting.'\n      }\n    }\n\n    // Default options\n    const defaultOptions = {\n      formData: true,\n      fieldName: 'files[]',\n      method: 'post',\n      metaFields: null,\n      responseUrlFieldName: 'url',\n      bundle: true,\n      headers: {},\n      locale: defaultLocale,\n      timeout: 30 * 1000,\n      limit: 0,\n      getResponseData (xhr) {\n        return JSON.parse(xhr.response)\n      },\n      getResponseError (xhr) {\n        return new Error('Upload error')\n      }\n    }\n\n    // Merge default options with the ones set by user\n    this.opts = Object.assign({}, defaultOptions, opts)\n    this.locale = Object.assign({}, defaultLocale, this.opts.locale)\n    this.locale.strings = Object.assign({}, defaultLocale.strings, this.opts.locale.strings)\n\n    // i18n\n    this.translator = new Translator({ locale: this.locale })\n    this.i18n = this.translator.translate.bind(this.translator)\n\n    this.handleUpload = this.handleUpload.bind(this)\n\n    // Simultaneous upload limiting is shared across all uploads with this plugin.\n    if (typeof this.opts.limit === 'number' && this.opts.limit !== 0) {\n      this.limitUploads = limitPromises(this.opts.limit)\n    } else {\n      this.limitUploads = (fn) => fn\n    }\n\n    if (this.opts.bundle && !this.opts.formData) {\n      throw new Error('`opts.formData` must be true when `opts.bundle` is enabled.')\n    }\n  }\n\n  getOptions (file) {\n    const opts = Object.assign({},\n      this.opts,\n      this.uppy.state.xhrUpload || {},\n      file.xhrUpload || {}\n    )\n    opts.headers = {}\n    Object.assign(opts.headers, this.opts.headers)\n    if (this.uppy.state.xhrUpload) {\n      Object.assign(opts.headers, this.uppy.state.xhrUpload.headers)\n    }\n    if (file.xhrUpload) {\n      Object.assign(opts.headers, file.xhrUpload.headers)\n    }\n\n    return opts\n  }\n\n  // Helper to abort upload requests if there has not been any progress for `timeout` ms.\n  // Create an instance using `timer = createProgressTimeout(10000, onTimeout)`\n  // Call `timer.progress()` to signal that there has been progress of any kind.\n  // Call `timer.done()` when the upload has completed.\n  createProgressTimeout (timeout, timeoutHandler) {\n    const uppy = this.uppy\n    const self = this\n    function onTimedOut () {\n      uppy.log(`[XHRUpload] timed out`)\n      const error = new Error(self.i18n('timedOut', { seconds: Math.ceil(timeout / 1000) }))\n      timeoutHandler(error)\n    }\n\n    let aliveTimer = null\n    function progress () {\n      if (timeout > 0) {\n        done()\n        aliveTimer = setTimeout(onTimedOut, timeout)\n      }\n    }\n\n    function done () {\n      if (aliveTimer) {\n        clearTimeout(aliveTimer)\n        aliveTimer = null\n      }\n    }\n\n    return {\n      progress,\n      done\n    }\n  }\n\n  createFormDataUpload (file, opts) {\n    const formPost = new FormData()\n\n    const metaFields = Array.isArray(opts.metaFields)\n      ? opts.metaFields\n      // Send along all fields by default.\n      : Object.keys(file.meta)\n    metaFields.forEach((item) => {\n      formPost.append(item, file.meta[item])\n    })\n\n    formPost.append(opts.fieldName, file.data)\n\n    return formPost\n  }\n\n  createBareUpload (file, opts) {\n    return file.data\n  }\n\n  upload (file, current, total) {\n    const opts = this.getOptions(file)\n\n    this.uppy.log(`uploading ${current} of ${total}`)\n    return new Promise((resolve, reject) => {\n      const data = opts.formData\n        ? this.createFormDataUpload(file, opts)\n        : this.createBareUpload(file, opts)\n\n      const timer = this.createProgressTimeout(opts.timeout, (error) => {\n        xhr.abort()\n        this.uppy.emit('upload-error', file.id, error)\n        reject(error)\n      })\n\n      const xhr = new XMLHttpRequest()\n      const id = cuid()\n\n      xhr.upload.addEventListener('loadstart', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} started`)\n        // Begin checking for timeouts when loading starts.\n        timer.progress()\n      })\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} progress: ${ev.loaded} / ${ev.total}`)\n        timer.progress()\n\n        if (ev.lengthComputable) {\n          this.uppy.emit('upload-progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        }\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} finished`)\n        timer.done()\n\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const resp = opts.getResponseData(xhr)\n          const uploadURL = resp[opts.responseUrlFieldName]\n\n          this.uppy.emit('upload-success', file.id, resp, uploadURL)\n\n          if (uploadURL) {\n            this.uppy.log(`Download ${file.name} from ${file.uploadURL}`)\n          }\n\n          return resolve(file)\n        } else {\n          const error = opts.getResponseError(xhr) || new Error('Upload error')\n          error.request = xhr\n          this.uppy.emit('upload-error', file.id, error)\n          return reject(error)\n        }\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        this.uppy.log(`[XHRUpload] ${id} errored`)\n        timer.done()\n\n        const error = opts.getResponseError(xhr) || new Error('Upload error')\n        this.uppy.emit('upload-error', file.id, error)\n        return reject(error)\n      })\n\n      xhr.open(opts.method.toUpperCase(), opts.endpoint, true)\n\n      Object.keys(opts.headers).forEach((header) => {\n        xhr.setRequestHeader(header, opts.headers[header])\n      })\n\n      xhr.send(data)\n\n      this.uppy.on('upload-cancel', (fileID) => {\n        if (fileID === file.id) {\n          xhr.abort()\n        }\n      })\n\n      this.uppy.on('cancel-all', () => {\n        // const files = this.uppy.getState().files\n        // if (!files[file.id]) return\n        xhr.abort()\n      })\n    })\n  }\n\n  uploadRemote (file, current, total) {\n    const opts = this.getOptions(file)\n    return new Promise((resolve, reject) => {\n      const fields = {}\n      const metaFields = Array.isArray(opts.metaFields)\n        ? opts.metaFields\n        // Send along all fields by default.\n        : Object.keys(file.meta)\n\n      metaFields.forEach((name) => {\n        fields[name] = file.meta[name]\n      })\n\n      fetch(file.remote.url, {\n        method: 'post',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(Object.assign({}, file.remote.body, {\n          endpoint: opts.endpoint,\n          size: file.data.size,\n          fieldname: opts.fieldName,\n          metadata: fields,\n          headers: opts.headers\n        }))\n      })\n      .then((res) => {\n        if (res.status < 200 && res.status > 300) {\n          return reject(res.statusText)\n        }\n\n        res.json().then((data) => {\n          const token = data.token\n          const host = getSocketHost(file.remote.host)\n          const socket = new UppySocket({ target: `${host}/api/${token}` })\n\n          socket.on('progress', (progressData) => emitSocketProgress(this, progressData, file))\n\n          socket.on('success', (data) => {\n            this.uppy.emit('upload-success', file.id, data, data.url)\n            socket.close()\n            return resolve()\n          })\n\n          socket.on('error', (errData) => {\n            this.uppy.emit('upload-error', file.id, new Error(errData.error))\n            reject(new Error(errData.error))\n          })\n        })\n      })\n    })\n  }\n\n  uploadBundle (files) {\n    return new Promise((resolve, reject) => {\n      const endpoint = this.opts.endpoint\n      const method = this.opts.method\n\n      const formData = new FormData()\n      files.forEach((file, i) => {\n        const opts = this.getOptions(file)\n        formData.append(opts.fieldName, file.data)\n      })\n\n      const xhr = new XMLHttpRequest()\n\n      const timer = this.createProgressTimeout(this.opts.timeout, (error) => {\n        xhr.abort()\n        emitError(error)\n        reject(error)\n      })\n\n      const emitError = (error) => {\n        files.forEach((file) => {\n          this.uppy.emit('upload-error', file.id, error)\n        })\n      }\n\n      xhr.upload.addEventListener('loadstart', (ev) => {\n        this.uppy.log('[XHRUpload] started uploading bundle')\n        timer.progress()\n      })\n\n      xhr.upload.addEventListener('progress', (ev) => {\n        timer.progress()\n\n        if (!ev.lengthComputable) return\n\n        files.forEach((file) => {\n          this.uppy.emit('upload-progress', {\n            uploader: this,\n            id: file.id,\n            bytesUploaded: ev.loaded,\n            bytesTotal: ev.total\n          })\n        })\n      })\n\n      xhr.addEventListener('load', (ev) => {\n        timer.done()\n\n        if (ev.target.status >= 200 && ev.target.status < 300) {\n          const resp = this.opts.getResponseData(xhr)\n          files.forEach((file) => {\n            this.uppy.emit('upload-success', file.id, resp)\n          })\n          return resolve()\n        }\n\n        const error = this.opts.getResponseError(xhr) || new Error('Upload error')\n        error.request = xhr\n        emitError(error)\n        return reject(error)\n      })\n\n      xhr.addEventListener('error', (ev) => {\n        timer.done()\n\n        const error = this.opts.getResponseError(xhr) || new Error('Upload error')\n        emitError(error)\n        return reject(error)\n      })\n\n      this.uppy.on('cancel-all', () => {\n        xhr.abort()\n      })\n\n      xhr.open(method.toUpperCase(), endpoint, true)\n\n      Object.keys(this.opts.headers).forEach((header) => {\n        xhr.setRequestHeader(header, this.opts.headers[header])\n      })\n\n      xhr.send(formData)\n\n      files.forEach((file) => {\n        this.uppy.emit('upload-started', file.id)\n      })\n    })\n  }\n\n  uploadFiles (files) {\n    const actions = files.map((file, i) => {\n      const current = parseInt(i, 10) + 1\n      const total = files.length\n\n      if (file.error) {\n        return () => Promise.reject(new Error(file.error))\n      } else if (file.isRemote) {\n        // We emit upload-started here, so that it's also emitted for files\n        // that have to wait due to the `limit` option.\n        this.uppy.emit('upload-started', file.id)\n        return this.uploadRemote.bind(this, file, current, total)\n      } else {\n        this.uppy.emit('upload-started', file.id)\n        return this.upload.bind(this, file, current, total)\n      }\n    })\n\n    const promises = actions.map((action) => {\n      const limitedAction = this.limitUploads(action)\n      return limitedAction()\n    })\n\n    return settle(promises)\n  }\n\n  handleUpload (fileIDs) {\n    if (fileIDs.length === 0) {\n      this.uppy.log('[XHRUpload] No files to upload!')\n      return Promise.resolve()\n    }\n\n    this.uppy.log('[XHRUpload] Uploading...')\n    const files = fileIDs.map((fileID) => this.uppy.getFile(fileID))\n\n    if (this.opts.bundle) {\n      return this.uploadBundle(files)\n    }\n\n    return this.uploadFiles(files).then(() => null)\n  }\n\n  install () {\n    this.uppy.addUploader(this.handleUpload)\n  }\n\n  uninstall () {\n    this.uppy.removeUploader(this.handleUpload)\n  }\n}\n"]}